var wrapPromise = require('WrapPromise');

class SlackPromiser {

    constructor(slack, token) {
        this.slack = slack;
        this.token = token;
    }

    listChannels() {
        var self = this;
        return wrapPromise(self.slack.channels.list, {'token': self.token});
    }

    getChannelHistory(id, oldest, latest) {
        var self = this;
        if(oldest !== undefined && latest !== undefined) {
            return wrapPromise(self.slack.channels.history, {
                'token': self.token,
                'channel': id,
                'oldest': oldest,
                'latest': latest
            });
        }

        if(latest !== undefined) {
            return wrapPromise(self.slack.channels.history, {
                'token': self.token,
                'channel': id,
                'latest': latest
            }).then(history => self.getAdditionalHistory(id, oldest, history));
        }

        return wrapPromise(self.slack.channels.history, {'token': self.token, 'channel': id})
            .then(history => self.getAdditionalHistory(id, oldest, history));
    }

    getAdditionalHistory(id, oldest, history) {
        var self = this;

        if(history.has_more) {
            return self.getChannelHistory(
                id,
                oldest,
                history.messages[history.messages.length - 1].ts
            ).then(additionalHistory => {
                history.messages = history.messages.concat(additionalHistory.messages);
                return Promise.resolve(history);
            });
        }
        return Promise.resolve(history);
    }
}

module.exports = SlackPromiser;
